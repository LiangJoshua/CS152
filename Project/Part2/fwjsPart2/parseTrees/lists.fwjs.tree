(prog (stat (expr var tru = (expr function (parameters ( x , y )) { (stat (expr x) ;) })) ;) (stat (expr var fls = (expr function (parameters ( x , y )) { (stat (expr y) ;) })) ;) (stat (expr var pair = (expr function (parameters ( x , y )) { (stat (expr function (parameters ( f )) { (stat (expr (expr f) (arguments ( (expr x) , (expr y) ))) ;) }) ;) })) ;) (stat (expr var fst = (expr function (parameters ( p )) { (stat (expr (expr p) (arguments ( (expr tru) ))) ;) })) ;) (stat (expr var snd = (expr function (parameters ( p )) { (stat (expr (expr p) (arguments ( (expr fls) ))) ;) })) ;) (stat (expr var p = (expr (expr pair) (arguments ( (expr 1) , (expr 2) )))) ;) (stat print ( (expr (expr fst) (arguments ( (expr p) ))) ) ;) (stat print ( (expr (expr snd) (arguments ( (expr p) ))) ) ;) (stat (expr var cons = (expr pair)) ;) (stat (expr var head = (expr fst)) ;) (stat (expr var tail = (expr snd)) ;) (stat (expr var isEmpty = (expr function (parameters ( lst )) { (stat (expr (expr lst) == (expr null)) ;) })) ;) (stat (expr var nums = (expr (expr cons) (arguments ( (expr 1) , (expr (expr cons) (arguments ( (expr 2) , (expr (expr cons) (arguments ( (expr 3) , (expr (expr cons) (arguments ( (expr 4) , (expr (expr cons) (arguments ( (expr 5) , (expr (expr cons) (arguments ( (expr 6) , (expr (expr cons) (arguments ( (expr 7) , (expr (expr cons) (arguments ( (expr 8) , (expr (expr cons) (arguments ( (expr 9) , (expr (expr cons) (arguments ( (expr 10) , (expr null) ))) ))) ))) ))) ))) ))) ))) ))) ))) )))) ;) (stat (expr var sumList = (expr function (parameters ( lst )) { (stat if ( (expr (expr isEmpty) (arguments ( (expr lst) ))) ) (block (stat (expr 0) ;)) else (block (stat (expr (expr (expr (expr head) (arguments ( (expr lst) ))) + (expr sumList)) (arguments ( (expr (expr tail) (arguments ( (expr lst) ))) ))) ;))) })) ;) (stat print ( (expr (expr sumList) (arguments ( (expr nums) ))) ) ;))
